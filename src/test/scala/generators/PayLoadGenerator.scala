package dev.galre.josue.steamreviews
package generators

import akka.http.scaladsl.model.HttpHeader

import scala.util.Random

object PayLoadGenerator {

  def generateReview(autoGeneratedUserId: Long, autoGeneratedSteamGameId: Long): String = {
    s"""
       |{
       |  "steamAppId": $autoGeneratedSteamGameId,
       |  "authorId": $autoGeneratedUserId,
       |  "region": "latam",
       |  "review": "Excelente juego!",
       |  "recommended": true,
       |  "votesHelpful": 1,
       |  "votesFunny": 1,
       |  "weightedVoteScore": 0.6,
       |  "commentCount": 0,
       |  "steamPurchase": true,
       |  "receivedForFree": false,
       |  "writtenDuringEarlyAccess": false,
       |  "authorPlaytimeForever": 294,
       |  "authorPlaytimeLastTwoWeeks": 13.4,
       |  "authorPlaytimeAtReview": 138.4,
       |  "authorLastPlayed": 192324
       |}
       |""".stripMargin
  }

  def generateGameRequest(newGameName: String = ""): String = {
    val x = Random.alphanumeric
    val gameName = if (newGameName.length == 0) s"game_${(x take 20).mkString}" else  newGameName
    s"""
       |{
       |    "steamAppName": "$gameName"
       |}
       |""".stripMargin
  }

  def generateUserRequest(newUserName: String = "", newGamesOwned: Int = 10, newNumReviews: Int = 10 ): String = {
    val x = Random.alphanumeric
    val userName =  if (newUserName.length == 0) s"user_${(x take 20).mkString}" else newUserName
    s"""{"name":"$userName","numGamesOwned":$newGamesOwned,"numReviews":$newNumReviews}"""
  }

  def generateBoundaryUserRequest(newUserName: String, newGamesOwned: Int = 10, newNumReviews: Int = 10): String = {
    s"""{"name":"$newUserName","numGamesOwned":$newGamesOwned,"numReviews":$newNumReviews}"""
  }

  def generateReviewUpdateRequest(region: String, review: String, recommended: Boolean): String = {
    s"""
       |{
       |  "region": "$region",
       |  "review": "$review",
       |  "recommended": $recommended,
       |  "votesHelpful": 1,
       |  "votesFunny": 1,
       |  "weightedVoteScore": 0.6,
       |  "commentCount": 0,
       |  "steamPurchase": true,
       |  "receivedForFree": false,
       |  "authorPlaytimeForever": 294,
       |  "authorPlaytimeLastTwoWeeks": 13.4,
       |  "authorPlaytimeAtReview": 138.4,
       |  "authorLastPlayed": 192324
       |}
       |""".stripMargin
  }

  def processHeaderId(headers: Seq[HttpHeader]): Long = {
    val autoGeneratedId = headers.head.value().substring(17).
      replaceAll("Some", "")
      .replaceAll("\\)", "")
      .replaceAll("\\(", "")
    autoGeneratedId.split(",")(0).toLong
  }

  def generateRandomString(prefix: String = "", length: Int = 20): String = {
    val x = Random.alphanumeric
    s"${prefix}_${(x take length).mkString}"
  }

}
