package dev.galre.josue.steamreviews
package repository

import akka.actor.{ ActorRef, Kill }
import akka.util.Timeout
import dev.galre.josue.steamreviews.repository.entity.UserActor.{ AddOneReview, CreateUser, DeleteUser, GetUserInfo, RemoveOneReview, UpdateUser, UserState }
import dev.galre.josue.steamreviews.repository.UserManagerActor.CreateUserFromCSV
import dev.galre.josue.steamreviews.spec.GherkinSpec

import scala.concurrent.duration._
import scala.util.Random

class UserManagerActorTest extends GherkinSpec {

  Feature ("A UserManagerActor behavior") {

    val userId: Long = Math.abs(Random.nextLong())
    val numGamesOwned: Option[Int] = Some(10)
    val numReviews: Option[Int] = Some(10)
    val x = Random.alphanumeric
    val userName = s"user_${(x take 20).mkString}"
    val baseUserState = UserState(userId,Some(userName), numGamesOwned, numReviews)
    val userManagerActor: ActorRef = system.actorOf(UserManagerActor.props)

    Scenario("A UserManagerActor should return UserState on CreateUser command") {

      Given("A UserManagerActor and a valid UserState")

      When(" CreateUser command is sent")
      userManagerActor ! CreateUser(userName,numGamesOwned,numReviews)

      Then("The newly created UserState should be returned")
      val createResult =  expectMsgClass(classOf[Right[String,UserState]])
      assert(createResult.isRight)

      val autoGeneratedUserId = createResult.value.userId
      assert(createResult.value == baseUserState.copy(userId = autoGeneratedUserId))

    }

    Scenario("A UserManagerActor should return UserState on CreateUserFromCSV command") {

      Given("A UserManagerActor and a valid CreateUserFromCSV command")
      val userId: Long = Math.abs(Random.nextLong())
      val userState = baseUserState.copy(userId = userId)

      When(" CreateUser command is sent")
      userManagerActor ! CreateUserFromCSV(userState)
      expectNoMessage()

      Then("The newly created UserState should be returned")
      userManagerActor ! GetUserInfo(userId)
      expectMsg(Right(userState))

    }


    Scenario("Return the properly updated state when receiving GetUserInfo command") {

      Given("A UserManagerActor and a valid UserState")
      userManagerActor ! CreateUser(userName,numGamesOwned,numReviews)
      val createResult = expectMsgClass(classOf[Right[String, UserState]])
      assert(createResult.isRight)
      val autoGeneratedUserId = createResult.value.userId

      When("GetUserInfo command is sent")
      userManagerActor ! GetUserInfo(autoGeneratedUserId)

      Then("The correct UserState should be returned")
      expectMsg(Right(baseUserState.copy(userId = autoGeneratedUserId)))
    }

    Scenario("Return a Right(UserState) on a valid (different name) UpdateUser command") {

      Given("A UserManagerActor with a UserState")
      userManagerActor ! CreateUser(userName, numGamesOwned, numReviews)
      val createResult = expectMsgClass(classOf[Right[String, UserState]])
      assert(createResult.isRight)
      val autoGeneratedUserId = createResult.value.userId

      val x = Random.alphanumeric
      val updatedUserName = Some(s"user_${(x take 20).mkString}")

      When("UpdateUser command sent")
      userManagerActor ! UpdateUser(autoGeneratedUserId, updatedUserName, numGamesOwned, numReviews)

      Then("Correct UserState should be returned")
      expectMsg(Right(baseUserState.copy(userId = autoGeneratedUserId, name = updatedUserName)))

    }

    Scenario("Return a Right(value = true) when receiving an AddOneView command") {
      Given("A UserManagerActor with a UserState")
      userManagerActor ! CreateUser(userName, numGamesOwned, numReviews)
      val createResult = expectMsgClass(classOf[Right[String, UserState]])
      assert(createResult.isRight)
      val autoGeneratedUserId = createResult.value.userId

      When("An AddOneReview command sent ")
      userManagerActor ! AddOneReview(autoGeneratedUserId)

      Then("A true response should be received")
      expectMsg(Right(true))
    }

    Scenario("Return a Right(value = true) when receiving a RemoveOneReview command") {

      Given("A UserManagerActor with a UserState")
      userManagerActor ! CreateUser(userName, numGamesOwned, numReviews)
      val createResult = expectMsgClass(classOf[Right[String, UserState]])
      assert(createResult.isRight)
      val autoGeneratedUserId = createResult.value.userId

      When("An RemoveOneReview command sent ")
      userManagerActor ! RemoveOneReview(autoGeneratedUserId)

      Then("A true response should be received")
      expectMsg(Right(true))

    }


    Scenario("Return a Right(value = true) when receiving a DeleteUser command") {

      Given("A UserManagerActor with a UserState")
      userManagerActor ! CreateUser(userName, numGamesOwned, numReviews)
      val createResult = expectMsgClass(classOf[Right[String, UserState]])
      assert(createResult.isRight)
      val autoGeneratedUserId = createResult.value.userId

      When("An RemoveOneReview command sent ")
      userManagerActor ! DeleteUser(autoGeneratedUserId)

      Then("A true response should be received")
      expectMsg(Right(true))

    }


    Scenario("Recover UserState after a Restart") {

      Given("UserManagerActor with a UserState")
      userManagerActor ! CreateUser(userName, numGamesOwned, numReviews)
      val createResult = expectMsgClass(classOf[Right[String, UserState]])
      assert(createResult.isRight)
      val autoGeneratedUserId = createResult.value.userId

      When("A restart happens")
      userManagerActor ! Kill

      Then("UserActor should restore UserState")
      val restartedUserManagerActor: ActorRef = system.actorOf(UserManagerActor.props)
      restartedUserManagerActor ! GetUserInfo(autoGeneratedUserId)
      expectMsg(Right(UserState(autoGeneratedUserId, Some(userName), numGamesOwned, numReviews)))

    }

  }

}
