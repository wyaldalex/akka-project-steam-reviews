package dev.galre.josue.steamreviews
package repository

import akka.actor.ActorRef
import akka.util.Timeout
import dev.galre.josue.steamreviews.repository.entity.UserActor.{ CreateUser, UserState }
import dev.galre.josue.steamreviews.spec.GherkinSpec

import scala.concurrent.duration._
import scala.util.Random

class UserManagerActorTest extends GherkinSpec {

  Feature ("A UserManagerActor behavior") {

    val userId: Long = Math.abs(Random.nextLong())
    val numGamesOwned: Option[Int] = Some(10)
    val numReviews: Option[Int] = Some(10)
    val x = Random.alphanumeric
    val userName = s"user_${(x take 20).mkString}"
    val baseUserState = UserState(userId,Some(userName), numGamesOwned, numReviews)
    val userManagerActor: ActorRef = system.actorOf(UserManagerActor.props)

    Scenario("A UserManagerActor should return UserState on CreateUser command") {

      Given("A UserManagerActor and a valid UserState")

      When(" CreateUser command is sent")
      userManagerActor ! CreateUser(userName,numGamesOwned,numReviews)

      Then("The newly created UserState should be returned")
      val createResult =  expectMsgClass(classOf[Right[String,UserState]])
      assert(createResult.isRight)

      val autoGeneratedUserId = createResult.value.userId
      assert(createResult.value == baseUserState.copy(userId = autoGeneratedUserId))

    }
  }

}
