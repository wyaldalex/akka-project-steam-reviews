package dev.galre.josue.steamreviews
package controller

import akka.actor.{ ActorRef, ActorSystem }
import akka.http.scaladsl.model.{ ContentTypes, StatusCodes }
import akka.http.scaladsl.server.Route
import akka.http.scaladsl.testkit.RouteTestTimeout
import akka.testkit.TestDuration
import akka.util.Timeout
import dev.galre.josue.steamreviews.repository.entity.ReviewActor.ReviewState
import dev.galre.josue.steamreviews.repository.{ GameManagerActor, ReviewManagerActor, UserManagerActor }
import dev.galre.josue.steamreviews.repository.entity.UserActor.{ CreateUser, UserState }
import dev.galre.josue.steamreviews.service.command.ReviewCommand.ComposedReview
import dev.galre.josue.steamreviews.service.utils.Actors
import dev.galre.josue.steamreviews.service.utils.Actors.StateManagers
import dev.galre.josue.steamreviews.spec.RoutesSpec

import scala.util.Random
import scala.concurrent.duration._
import scala.concurrent.ExecutionContext

//Used to desiralize the entities
import de.heikoseeberger.akkahttpcirce.FailFastCirceSupport._
import io.circe.generic.auto._

class ReviewRouterTest extends RoutesSpec {

  //Marked as Error
  Feature("A ReviewRouter Behavior") {

    val reviewId = Math.abs(Random.nextLong())
    val steamAppId = 1444//Math.abs(Random.nextLong())
    val authorId = 1442//Math.abs(Random.nextLong())
    val region = "US/EAST"
    val review = "Good Game"
    val timestampCreated = Math.abs(Random.nextLong())
    val timestampUpdated = Math.abs(Random.nextLong())
    val recommended = true
    val votesHelpful = Math.abs(Random.nextLong())
    val votesFunny = Math.abs(Random.nextLong())
    val weightedVoteScore = Math.abs(Random.nextDouble())
    val commentCount = Math.abs(Random.nextLong())
    val steamPurchase = true
    val receivedForFree = true
    val writtenDuringEarlyAccess = false
    val authorPlaytimeForever = Math.abs(Random.nextDouble())
    val authorPlaytimeLastTwoWeeks = Math.abs(Random.nextDouble())
    val authorPlaytimeAtReview = Math.abs(Random.nextDouble())
    val authorLastPlayed = Math.abs(Random.nextDouble())
    val baseReviewState: ReviewState = ReviewState(
      reviewId, 13131L, 13132L, Some("US/EAST"),
      Some("Good Game"), Some(1668458476L), Some(1668458476L), Some(true), Some(100L), Some(100L),
      Some(78.3), Some(10), Some(true), Some(false), Some(false),
      Some(1), Some(1), Some(1), Some(1)
    )
    implicit val timeout = Timeout(10.seconds)
//    val reviewManagerActor: ActorRef = system.actorOf(ReviewManagerActor.props)
//    val stateManagers: StateManagers = StateManagers(
//      ActorRef.noSender, ActorRef.noSender, reviewManagerActor,
//      reviewManagerActor, ActorRef.noSender, ActorRef.noSender, ActorRef.noSender
//    )
//implicit val actorSystem: ActorSystem =
//     implicit val system = ActorSystem()
    //implicit def actorSystem: ActorSystem = ActorSystem("adas")

    implicit def executionContext: ExecutionContext = system.dispatcher
    val stateManagers: StateManagers = Actors.init

    val reviewRoutes: Route = ReviewRouter(stateManagers.Command.review, stateManagers.Query.review).routes
    val userRoutes: Route = UserRouter(stateManagers.Command.user, stateManagers.Query.user).routes
    val gameRoutes: Route = GameRouter(stateManagers.Command.game, stateManagers.Query.game).routes

      Scenario("A User sends a CreateReviewRequest") {
      implicit val timeout = RouteTestTimeout(300.seconds.dilated)
      Given("a Review Information and a POST request to generate Review and valid AuthorId and GameId")
        val x = Random.alphanumeric
        val newUserName = s"user_${(x take 20).mkString}"
        val gameName = s"game_${(x take 20).mkString}"
        val user = s"""{"name":"$newUserName","numGamesOwned":10,"numReviews":10}"""
        val game =
          s"""
             |{
             |    "steamAppName": "$gameName"
             |}
             |""".stripMargin
        val autoGeneratedUserId = Post("/users").withEntity(ContentTypes.`application/json`, user) ~!> userRoutes ~> check {
          assert(status == StatusCodes.Created)
          val autoGeneratedId = headers.head.value().substring(17).
            replaceAll("Some", "")
            .replaceAll("\\)", "")
            .replaceAll("\\(", "")
          autoGeneratedId.split(",")(0).toLong
        }
        val autoGeneratedSteamGameId = Post("/games").withEntity(ContentTypes.`application/json`, game) ~!> gameRoutes ~> check {
          assert(status == StatusCodes.Created)
          val autoGeneratedId = headers.head.value().substring(17).
            replaceAll("Some", "")
            .replaceAll("\\)", "")
            .replaceAll("\\(", "")
          autoGeneratedId.split(",")(0).toLong
        }
        info(s"Auto generated Game Id $autoGeneratedSteamGameId")
        info(s"Auto generated User Id $autoGeneratedUserId")

//      val createReviewRequest =
//        s"""
//          |{
//          |  "steamAppId": $steamAppId,
//          |  "authorId": $authorId,
//          |  "region": "$region",
//          |  "review": "$review",
//          |  "recommended": $recommended,
//          |  "votesHelpful": $votesHelpful,
//          |  "votesFunny": $votesFunny,
//          |  "weightedVoteScore": $weightedVoteScore,
//          |  "commentCount": $commentCount,
//          |  "steamPurchase": $steamPurchase,
//          |  "receivedForFree": $receivedForFree,
//          |  "writtenDuringEarlyAccess": $writtenDuringEarlyAccess,
//          |  "authorPlaytimeForever": $authorPlaytimeForever,
//          |  "authorPlaytimeLastTwoWeeks": $authorPlaytimeLastTwoWeeks,
//          |  "authorPlaytimeAtReview": $authorPlaytimeAtReview,
//          |  "authorLastPlayed": $authorLastPlayed
//          |}
//          |""".stripMargin
      val createReviewRequest =
s"""
  |{
  |  "steamAppId": $autoGeneratedSteamGameId,
  |  "authorId": $autoGeneratedUserId,
  |  "region": "latam",
  |  "review": "Excelente juego!",
  |  "recommended": true,
  |  "votesHelpful": 1,
  |  "votesFunny": 1,
  |  "weightedVoteScore": 0.6,
  |  "commentCount": 0,
  |  "steamPurchase": true,
  |  "receivedForFree": false,
  |  "writtenDuringEarlyAccess": false,
  |  "authorPlaytimeForever": 294,
  |  "authorPlaytimeLastTwoWeeks": 13.4,
  |  "authorPlaytimeAtReview": 138.4,
  |  "authorLastPlayed": 192324
  |}
  |""".stripMargin
      val request = Post("/reviews").withEntity(ContentTypes.`application/json`, createReviewRequest)

      When("The User sends a valid ComposedView result")
      val composedReviewResult = request ~!> reviewRoutes ~> check {

        Then("create review will be returned with 200 ok status")
        assert(status == StatusCodes.OK)
        entityAs[ComposedReview]
      }
     assert(composedReviewResult.author.userId == autoGeneratedUserId)
     assert(composedReviewResult.steamApp.steamAppId == autoGeneratedSteamGameId)
    }
  }

}
